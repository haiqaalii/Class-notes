Linux Terminal Commands

1. **pwd** (Print Working Directory)
   - Displays the current directory you're working in.
   Example; pwd 
   /home/haiqaali_9

2. **ls** (List)
   - Usage:ls [options] [directory]
   - Lists the contents of a directory. It displays files and directories in the current directory.
   Example; ls
   Desktop Pictures New_File

3. **cd** (Change Directory)
   - Usage:cd [directory]
   - Changes the current working directory.
   Example; cd SecondDirectory
   haiqaali_9@reesesheart:~/SecondDirectory$ 
   Example to go to the home directory; cd
   haiqaali_9@reesesheart:~$ 

4. **mkdir** (Make Directory)
   - Creates a new directory.
   - Usage:mkdir [Directory_Name]
   - Creates a new directory.

5. **rmdir** (Remove Directory)
   - Usage:rmdir [directory]
   - Removes an empty directory.

6. **rm** (Remove)
   - Usage: rm [file]
   - Deletes a file. Use rm -r [directory] to remove a directory and stuff inside it.

7. **cp** (Copy)
   - Usage:cp [source] [destination]
   - Copies a file or directory.

8. **mv** (Move/Rename)
   - Usage:mv [source] [destination]
   - Moves or renames files and directories.

9. **cat** 
   - Usage:cat [file]
   - Shows you the contents of a file.

10. **nano** (Text Editor)
    - Usage:nano [file]
    - Opens a text editor.

11. **touch** (Create New File)
    - Usage:touch [file]
    - Creates an empty file. 

12. **chmod** (Change File Permissions)
    - Usage:chmod [permissions] [file]
    - Changes the permissions of a file or directory.
Add execute permission to the owner: chmod u+x [filename]
Remove write permission for a group: chmod g-w filename
Set read only permission for others: chmod o=r filename
Give full permissions to owner, read and execute to group, and read to others: chmod 754 filename
This breaks down to the following:

The digits break down as:

7 (owner): Read (4) + Write (2) + Execute (1) = 7
5 (group): Read (4) + Execute (1) = 5
4 (others): Read = 4

This will display the permissions in the format: -rwxr-xr--

13. **chown** (Change Ownership)
    - Usage:chown [user] [group] [file]
    - Changes the ownership of a file or directory.
      
14. **ps** (Process Status)
    - Usage:ps
    - shows the list of running processes.
Example: ps
         PID TTY          TIME CMD
         2496 pts/0    00:00:00 bash
         3242 pts/0    00:00:00 ps

15. **df** (Disk Free)
    - Usage:df
    - Shows disk space usage of mounted file systems.
 
16. **du** (Disk Usage)
    - Usage:du [directory]
    - Shows disk usage of files and directories.

17. **top** (Task Manager)
    - Usage:top
    - Shows you git information about system processes, memory, and CPU usage.
   
18. **man** (Manual)
    - Usage:man [command]
    - Shows you a manual page for a command.

19. **sudo** (Superuser)
    - Usage:sudo [command]

20. **apt** (Package Manager)
    - Usage:apt [command]
    - Used for installing, updating, and removing software packages.

21. **echo** (Print Text)
   - Usage:echo [text]
   - Shows text or variables to the terminal.
   - Example: echo "Hello World"

22. **head** (View Beginning of File)
   - Usage:head [file]
   - Shows the first 10 lines of a file. You can change the number of lines with the `-n` option.

23. **find** (Search for Files)
   - Usage:find [directory] -name [pattern]
   - Searches for files and directories in a specific directory.

24. **history** (Command History)
   - Usage:history
   - Shows a list of commands you used before.

25. **wget** (Download Files)
   - Usage:wget [URL]
   - Downloads files.

26. **curl** (Transfer Data)
   - Usage:curl [URL]
   - Transfers data to or from a server using various protocols like HTTP, FTP, etc.
     
27. **zip** / **unzip** (Compress and Extract ZIP Files)
   - Usage:
     - zip [archive_name.zip] [file]: Compress files into a ZIP archive.
     - unzip [archive_name.zip]: Extract files from a ZIP archive.    

What is Bash Scripting?
A bash script is a plain which contains a series of commands to be exucuted by the Bash Shell. it allows users to
automate and perform a series of commands without having to maunally enter them.

Steps to Writing a bash Script:
1. Create a text file and make it end with .sh extension. Example: Bashscript.sh
2. Start the script with the shebang to specify the interperter. Example: #!/bin/bash
3. Type out the commands just like they would be typed out in a terminal.

Using variables in Bash Script Example:

#!/bin/bash
# Defining variables

NAME="Alice"
echo "Hello, $NAME!"

Example of a Bash Script:

#!/bin/bash
# A simple Bash script

echo "Hello, World!"

Instructions for creating a Test script:

#!/bin/bash
# Script to check if a directory exists and create it if not

echo "Enter directory name: "
read DIR

if [ -d "$DIR" ]; then
  echo "Directory $DIR already exists."
else
  echo "Directory $DIR does not exist. Creating it now."
  mkdir "$DIR"
  echo "Directory $DIR created."
fi

How this Bash Script works?
1. The script asks the user for a directory name.
2. It checks if the directory exists with [ -d "$DIR" ].
3. If the directory exists, it prints a message. If not, it creates the directory using mkdir.

To display the disk space usage use the following command: df -h

System Monitering:
System monitoring is ensuring the optimal systems reliability and preformance. It helps with early detection of any issues.
Commands:
The command **top** displays the cpu usage, system processes and memory usage.

**htop**
This command shows a colorful, interactive overview of CPU, memory usage, and processes.
Navigate through processes using arrow keys; press F10 or q to quit.

How to install htop? ; Run the following command: **sudo apt install htop**

The following command **uptime** displays the time of how long the system has been running for.
MORE COMMANDS:
1. **journalctl**
   -Usage: To display all the system logs.

2. **journalctl -f**
   -Usage: To view recent logs (with real-time updates)

3. **journalctl -b**
   -Usage: To display the last boot's logs.

4. **journalctl -p err**
   -Usage: To view system errors and warnings:

5. **cat /var/log/syslog**
   -Usage: To view the system logs.

6. **cat /var/log/auth.log**
   -Usage: Ti view the authentication logs.

7. **tail -n 20 /var/log/syslog**
   -Usage: To display the last few lines of a log

What are Basic Security Prinicples in Linux?
1. Least Privilage- Users and processes should only have the minimum permissions necessary to perform their tasks.
2. File and Directory Permissions- Each file or directory has ownership and permission settings that determine who can read, write, or execute it.
3. User and Group Management- Carefully managing who can log in to the system and what privileges they have is essential.
4. Regular Updates- Keeping the system and installed software up-to-date to mitigate known vulnerabilities.
5. Firewalls- Controlling incoming and outgoing network traffic to limit exposure to external attacks.

FILE PERMISSIONS IN LINUX:
Read (r): Allows reading the file or listing the contents of a directory.
Write (w): Allows modifying a file or adding/removing files in a directory.
Execute (x): Allows running a file as a program or entering a directory.

Owner (user who owns the file)
Group (group of users who can access the file)
Others (anyone else)

You can view file permissions using the command **ls -l [FileName]** The output usually looks like this; -rwxr-xr--

The following command gives the owner rwx permissions, and the group and others r-x permissions: chmod 755 filename

This floowing command gives the execute permission to the owner of the file: chmod +x filename

To change the owner of the file: sudo chown newowner filename

To change the owner and the group: sudo chown newowner:newgroup filename

How to view all the file permissions: ls -l /path/to/file

USER MANAGMENT:
To create a new user: sudo adduser username
To add a user in to a group: sudo usermod -aG groupname username
To delete a user: sudo deluser username

ASIGNING PERMISSIONS TO USERS:
To change the group ownership of a folder: sudo chown :groupname /path/to/folder
To adjust the folder permissions: sudo chmod 770 /path/to/folder

FIREWALL BASICS:
To enable the firewall: sudo ufw enable
To allow traffic on a specific port (example; SSH on port 22): sudo ufw allow 22
To deny traffic on a specific port: sudo ufw deny 22
To veiw the status of UFW: sudo ufw status

How to restrict access to only the owner: chmod 700 /path/to/secure-folder






